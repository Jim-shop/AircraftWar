@startuml

interface ShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<AbstractBullet>
}

interface HeroShootStrategy extends ShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<AbstractBullet>
}

interface EnemyShootStrategy extends ShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<AbstractBullet>
}

class HeroDirectShootStrategy implements HeroShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<HeroBullet>
}

class HeroScatterShootStrategy implements HeroShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<HeroBullet>
}

class EnemyNoShootStrategy implements EnemyShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<EnemyBullet>
}

class EnemyDirectShootStrategy implements EnemyShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<EnemyBullet>
}

class EnemyScatterShootStrategy implements EnemyShootStrategy {
    + shoot(int x, int y, int speedY, int power): List<EnemyBullet>
}

abstract class AbstractShootStrategyFactory {
    + getStrategy(int shootNum): ShootStrategy
}

class HeroShootStrategyFactory extends AbstractShootStrategyFactory {
    + getStrategy(int shootNum): HeroShootStrategy
}

class EnemyShootStrategyFactory extends AbstractShootStrategyFactory {
    + getStrategy(int shootNum): HeroShootStrategy
}

HeroShootStrategyFactory ..> HeroShootStrategy
EnemyShootStrategyFactory ..> EnemyShootStrategy

abstract class AbstractAircraft {
    # shootStrategy: ShootStrategy
    # shootStrategyFactory: AbstractShootStrategyFactory
    + setShootNum(int shootNum): void
    + setStrategyFactory(AbstractShootStrategyFactory strategyFactory): void
'    + setStrategy(ShootStrategy strategy): void
    + shoot(): void
}

AbstractAircraft o--> ShootStrategy

class Game {}

AbstractShootStrategyFactory -> AbstractAircraft
Game -> AbstractAircraft

@enduml